#!/bin/bash

# Copyright (c) 2019, NVIDIA CORPORATION.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -e

# Function to printout help section of the script.
function ShowUsage {
	cat <<EOF
---------------------------------------------------------------------------
This script generates the signature header of the provided file in the current
directory.
---------------------------------------------------------------------------

Usage:
$1 --file <file> --chip <chipid> [--key <file>]

--key: Key for signing required files (optional)
--file: The file from which this script will generate a header
--chip: Chip ID
EOF
}

# if no arguments provided
if [ "$#" = 0 ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	ShowUsage "$0"
	exit 1;
fi

# assumption: this script is stored inside Linux_for_Tegra folder
L4T_DIR=$(cd "$(dirname "$0")" && pwd)
L4T_BOOTLOADER_DIR="${L4T_DIR}/bootloader"
file=""
key=""
chip=""
opstr+=":-:";
while getopts "${opstr}" OPTION; do
	case $OPTION in
	-) case ${OPTARG} in
		file)
		file="${!OPTIND}";
		OPTIND=$((OPTIND + 1));
		;;
		key)
		key="${!OPTIND}";
		OPTIND=$((OPTIND + 1));
		;;
		chip)
		chip="${!OPTIND}";
		OPTIND=$((OPTIND + 1));
		;;
	   esac;;
	*)
	   ShowUsage "$0";
	   ;;
	esac;
done
if [ -z "${file}" ]; then
	ShowUsage "$0"
	exit 1
fi

if ! [ -f "${file}" ]; then
	echo "${file}: No such file"
	exit 1
fi

if [ -z "${chip}" ]; then
	ShowUsage "$0"
	exit 1
fi

if [ -n "${key}" ] && ! [ -f "${key}" ]; then
	echo "${key}: No such file"
	exit 1
fi

# Create a new file descriptor to duplicate the output to both a variable and
# stdout
exec 5>&1
CMD="${L4T_BOOTLOADER_DIR}/tegraflash.py "
output="$(${CMD} --chip "${chip}" --key "${key}" --cmd "sign ${file}" | tee >(cat - >&5))"
signedfile="$(echo "${output}" | grep "Signed file" | sed -n "s/.*Signed file: //p")"
if ! [ -f "${signedfile}" ]; then
	echo "Error: Unable to find the signed file generated by tegraflash.py"
	exit 1;
fi
echo "Generate header for $(basename "${signedfile}")"
dd if="${signedfile}" of="${file}.sig" bs=4096 count=1 > /dev/null 2>&1;
echo "Generate 16-byte-size-aligned base file for $(basename "${signedfile}")"
dd if="${signedfile}" of="${file}" bs=4096 skip=1 > /dev/null 2>&1;
echo "Remove temporary file"
rm "${signedfile}"
